{"version":3,"sources":["models/Instrument.ts","components/SequenceDisplay.tsx","components/TransportControls.tsx","models/Pattern.ts","models/Sequence.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["Instrument","Measure","props","instrument","undefined","pattern","offset","times","i","Grid","Column","key","Checkbox","defaultChecked","aria-label","InstrumentRow","ptrn","Row","textAlign","width","stackable","columns","SequenceDisplay","sequence","allInstruments","Object","keys","Container","celled","map","getPatternByInstrument","BpmInput","id","innerInput","type","inputMode","maxLength","min","max","label","Label","as","htmlFor","Input","input","labelPosition","style","TransportControls","Button","Group","icon","Icon","name","Component","DEFAULT_PATTERN","Pattern","this","slice","step","checkValidStep","Sequence","kickPattern","snarePattern","openHatPattern","closedHatPattern","Kick","Snare","OpenHat","ClosedHat","console","log","setStep","clearStep","App","defaultSequence","className","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8105f789.chunk.js","sourcesContent":["export enum Instrument {\n  Kick = 'Kick',\n  Snare = 'Snare',\n  OpenHat = 'Open Hat',\n  ClosedHat = 'Closed Hat',\n}","import React from 'react';\nimport { Checkbox, Container, Grid } from 'semantic-ui-react';\nimport times from 'lodash/times';\nimport { Instrument } from '../models/Instrument';\nimport Sequence from '../models/Sequence';\nimport Pattern from '../models/Pattern';\n\ninterface MeasureProps {\n  instrument: Instrument | undefined,\n  pattern: Array<boolean>,\n  offset: number,\n}\n\n// TODO: convert this to a stateful component \nconst Measure = (props: MeasureProps = {instrument: undefined, pattern: [], offset: 0}) => {\n  const {instrument, pattern, offset} = props;\n  return (\n    <>\n      {times(8, (i) => (\n        <Grid.Column key={i}>\n          {/* TODO: click handlers for setting/clearing */}\n          <Checkbox \n            key={i} \n            defaultChecked={pattern[i + offset]} \n            aria-label={`${instrument} ${i+1+offset}`}\n          />\n        </Grid.Column>\n      ))}\n    </>\n  );\n};\n\ninterface InstrumentRowProps {\n  pattern: Pattern,\n}\n\nconst InstrumentRow = (props: InstrumentRowProps) => {\n  // TODO this should probably be tables because it shows tabular data\n  const ptrn = props.pattern;\n  const {instrument, pattern} = ptrn;\n  return (\n    <Grid.Row>\n      <Grid.Column textAlign='right' width={4}>\n      {instrument}\n      </Grid.Column>\n      <Grid.Column width={12}>\n        {/* TODO: make this rely on Pattern.STEPS_PER_BAR */}\n        <Grid stackable columns={2}>\n          <Grid.Column>\n            <Grid columns={8}>\n              <Measure instrument={instrument} pattern={pattern} offset={0} />\n            </Grid>\n          </Grid.Column>\n          <Grid.Column>\n            <Grid columns={8}>\n              <Measure instrument={instrument} pattern={pattern} offset={8} />\n            </Grid>\n          </Grid.Column>\n        </Grid>\n      </Grid.Column>\n    </Grid.Row>\n  )};\n\ninterface SequenceDisplayProps {\n  sequence: Sequence;\n}\n\n// TODO: Header row with number of step\nexport default function SequenceDisplay(props: SequenceDisplayProps) {\n  const { sequence } = props;\n  const allInstruments: (keyof typeof Instrument)[] = \n    Object.keys(Instrument) as (keyof typeof Instrument)[];\n  return (\n    <Container>\n      <Grid celled>\n        {allInstruments.map((instrument) => (\n          <InstrumentRow \n            key={instrument}\n            pattern={sequence.getPatternByInstrument(Instrument[instrument])} \n          />\n        ))}\n      </Grid>\n    </Container>\n  )\n}\n","import React, { Component } from 'react';\nimport { Button, Container, Icon, Input, Label } from 'semantic-ui-react';\n\nconst BpmInput = (props : { id: string | undefined }) => {\n  const { id } = props;\n  const innerInput = (<input \n    type='number'\n    inputMode='numeric'\n    pattern='[0-9]*' \n    maxLength={3}\n    min={1}\n    max={300}\n  />);\n  const label = <Label as='label' htmlFor={id}>BPM</Label>;\n\n  return (\n    <Input \n      id={id}\n      input={innerInput}\n      label={label}\n      labelPosition='right'\n      style={{ width: '80px' }}\n    />\n  )\n}\n\n\nexport default class TransportControls extends Component {\n  render() {\n    return (\n      <Container>\n        <Button.Group>\n          <Button icon aria-label='Play'>\n            <Icon name='play' />\n          </Button>\n          <Button icon aria-label='Stop'>\n            <Icon name='stop' />\n          </Button>\n        </Button.Group>{' '}\n        <BpmInput id='bpm'/>\n      </Container>\n    )\n  }\n}\n","import { Instrument } from './Instrument';\n\nconst PATTERN_LENGTH = 16;\nexport const STEPS_PER_BAR = 8;\n\nexport const DEFAULT_PATTERN = [\n  false, false, false, false, false, false, false, false,\n  false, false, false, false, false, false, false, false,\n];\n\nexport default class Pattern {\n  instrument: Instrument;\n  pattern: Array<boolean>;\n\n  constructor(instrument: Instrument, pattern: Array<boolean> | undefined = undefined) {\n    this.instrument = instrument;\n    this.pattern = pattern || DEFAULT_PATTERN.slice();\n  }\n\n  checkValidStep(step: number) {\n    return step < PATTERN_LENGTH;\n  }\n\n  setStep(step: number) {\n    if(this.checkValidStep(step)) {\n      this.pattern[step] = true;\n    }\n  }\n\n  clearStep(step: number) {\n    if(this.checkValidStep(step)) {\n      this.pattern[step] = false;\n    }\n  }\n}","import Pattern from './Pattern';\nimport { Instrument } from './Instrument';\n\nexport default class Sequence {\n  kickPattern: Pattern;\n  snarePattern: Pattern;\n  openHatPattern: Pattern;\n  closedHatPattern: Pattern;\n  constructor(\n    kickPattern: Pattern | undefined = undefined,\n    snarePattern: Pattern | undefined = undefined,\n    openHatPattern: Pattern | undefined = undefined,\n    closedHatPattern: Pattern | undefined = undefined,\n  ) {\n    this.kickPattern = kickPattern || new Pattern(Instrument.Kick);\n    this.snarePattern = snarePattern || new Pattern(Instrument.Snare);\n    this.openHatPattern = openHatPattern || new Pattern(Instrument.OpenHat);\n    this.closedHatPattern = closedHatPattern || new Pattern(Instrument.ClosedHat);\n  }\n\n  getPatternByInstrument(instrument: Instrument): Pattern {\n    switch (instrument) {\n      case Instrument.Kick:\n        return this.kickPattern;\n      case Instrument.Snare:\n        return this.snarePattern;\n      case Instrument.OpenHat:\n        return this.openHatPattern;\n      case Instrument.ClosedHat:\n        return this.closedHatPattern;\n    }\n  }\n\n  setStep(instrument: Instrument, step: number) {\n    const pattern = this.getPatternByInstrument(instrument);\n    console.log(pattern);\n    pattern?.setStep(step);\n  }\n\n  clearStep(instrument: Instrument, step: number) {\n    const pattern = this.getPatternByInstrument(instrument);\n    pattern?.clearStep(step);\n  }\n}","import React from 'react';\nimport { Header } from 'semantic-ui-react';\nimport './App.css';\nimport SequenceDisplay from './components/SequenceDisplay';\nimport TransportControls from './components/TransportControls';\nimport Sequence from './models/Sequence';\nimport { Instrument } from './models/Instrument';\n\nfunction App() {\n  const defaultSequence = new Sequence();\n  defaultSequence.setStep(Instrument.OpenHat, 4);\n  defaultSequence.setStep(Instrument.Kick, 6);\n  return (\n    <div className=\"App\">\n      <Header as='h1'>808</Header>\n      <TransportControls />\n      <SequenceDisplay sequence={defaultSequence} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}